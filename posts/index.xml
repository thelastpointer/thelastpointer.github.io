<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on thelastpointer</title>
        <link>/posts/</link>
        <description>Recent content in Posts on thelastpointer</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 21 Jun 2019 11:44:01 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Cookies</title>
            <link>/posts/cookies/</link>
            <pubDate>Fri, 21 Jun 2019 11:44:01 +0200</pubDate>
            
            <guid>/posts/cookies/</guid>
            <description>I finally bit the bullet and added a cookie consent popup to the site. Skip to the part where I explain these cookies.</description>
            <content type="html"><![CDATA[<p>I finally bit the bullet and added a cookie consent popup to the site. <a href="#explanation">Skip to the part where I explain these cookies.</a></p>

<p>I was trying my best to make this site as lean and hassle-free as possible, but I&rsquo;m also very curious about visitors &ndash; how many people see these posts? Are some posts more popular than others? Should I post <em>more</em> of something?</p>

<p>I hoped that github will provide me with some stats one this &ndash; I wasn&rsquo;t expecting much, but then again, I didn&rsquo;t need much. Github, however, gives me zero information on traffic. I&rsquo;ve been staring at this &ldquo;data&rdquo; for months now:</p>

<p><img src="/img/visitors.png" alt="Github doesn't have enough data" /></p>

<p>I get that I don&rsquo;t have thousands of views, but I&rsquo;m sure that at least some of my friends see this&hellip;? (And how many visitors should I have before I get access to data anyway?)</p>

<p>So I&rsquo;ve been looking around for other options. This is a static site, so I can&rsquo;t run any server-side code &ndash; that would be the easiest method, and the most user-friendly one. I seriously contemplated renting a server just for this, but I kinda like github.io and I feel that users can trust it too.</p>

<p>Other methods are available, too, most notably Google Analytics. The problem with these is that they store a cookie (which is used to make sure that a single user isn&rsquo;t counted twice) and I really, <em>really</em> hate cookie-consent dialogs. The consent is enforced by law, and I found no service that does not need a consent dialog. I feel like these actively make websites worse &ndash; they are annoying and provide no useful information to the user. They usually point to confusing explanations, list hundreds of ad providers, and obscure legal text; I sincerely believe that nobody reads these. Even worse, if I don&rsquo;t agree (and most of time, I don&rsquo;t agree just out of spite), then the consent dialog will be displayed to me <em>every single time</em> I visit that particular site, meaning that I have to face this minor annoyance multiple times, which adds up.</p>

<hr />

<p><a name="explanation"></a>
So what am I using these cookies for?</p>

<p>I store a single Google Analytics cookie, which is used to make sure that when you visit the site multiple times, you will only be counted once. The cookie contains a string of random numbers and letters, something like this: <code>GA1.2.211694324.1557125602</code></p>

<p>When you visit the site, google analytics checks if this string has been used before, and if not, it increases the unique visitor count.</p>

<p>That&rsquo;s it.</p>

<p>I don&rsquo;t know who you are, there is no personal information associated with this string, I&rsquo;m not trying to sell you anything and you won&rsquo;t be tracked in any way &ndash; except now I know if you visited the site.</p>

<p>I opted out from nearly every feature of Google Analytics because I don&rsquo;t need them.</p>

<p>If you need more information or you want to educate yourself on the subject, here are some simple explanations:
* <a href="https://www.cookiesandyou.com/">An explanation of cookies</a>
* <a href="http://www.whatarecookies.com/">What are cookies?</a>
* <a href="https://www.wikihow.com/Disable-Cookies">How to disable cookies?</a></p>

<p>I would also like to apologize for the inconvenience this causes you. It&rsquo;s a minor annoyance, but still an annoyance &ndash; sorry for that.</p>
]]></content>
        </item>
        
        <item>
            <title>E3 2019</title>
            <link>/posts/e3-2019/</link>
            <pubDate>Tue, 11 Jun 2019 12:18:28 +0200</pubDate>
            
            <guid>/posts/e3-2019/</guid>
            <description>Helen, Level 12 Hacker Avengers Video Game to ride the success of Endgame Marvel&amp;#39;s Avengers (Dev. Crystal Dynamics.) pic.twitter.com/VrbnlM4zE1
&amp;mdash; Matt Kim (@LawofTD) June 11, 2019  Bethesda dudes talking about games</description>
            <content type="html"><![CDATA[<p><em>Helen, Level 12 Hacker</em>
<img src="/img/helen.png" alt="Helen" /></p>

<p><em>Avengers Video Game to ride the success of Endgame</em>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Marvel&#39;s Avengers (Dev. Crystal Dynamics.) <a href="https://t.co/VrbnlM4zE1">pic.twitter.com/VrbnlM4zE1</a></p>&mdash; Matt Kim (@LawofTD) <a href="https://twitter.com/LawofTD/status/1138267396953726977?ref_src=twsrc%5Etfw">June 11, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>

<p><em>Bethesda dudes talking about games</em><br />
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Bethesda Front Row Hypeman Squad freaking out over every other sentence is honestly the funniest thing I&#39;ve seen all day. <a href="https://t.co/XnxntXzNPB">pic.twitter.com/XnxntXzNPB</a></p>&mdash; Tylor (@theSirToasty) <a href="https://twitter.com/theSirToasty/status/1137896050201698304?ref_src=twsrc%5Etfw">June 10, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>

<p><em>Doomguy treads Bugs Bunny territory</em>

<video width="100%" controls preload="none" poster="/img/posters/doomcannon.jpg"><source src="https://giant.gfycat.com/FarawayGiganticChinesecrocodilelizard.webm" type="video/webm"></video>
</p>

<hr />

<p>But, of course, E3 2019 was single-handedly eclipsed by Keanu Reeves:
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Best part of <a href="https://twitter.com/hashtag/XboxE3?src=hash&amp;ref_src=twsrc%5Etfw">#XboxE3</a> for me <a href="https://t.co/fi6Jf1y0AF">pic.twitter.com/fi6Jf1y0AF</a></p>&mdash; Nibel (@Nibellion) <a href="https://twitter.com/Nibellion/status/1137837183233077250?ref_src=twsrc%5Etfw">June 9, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>

<hr />

<p>On a serious note, this boot sequence in the Halo Infinite trailer is just delicious:</p>


<video width="100%" controls preload="none" poster="/img/posters/haloboot.jpg"><source src="/img/haloboot.webm" type="video/webm"></video>


<p>(Watch the full trailer <a href="https://www.youtube.com/watch?v=ZtgzKBrU1GY">here</a>.)</p>
]]></content>
        </item>
        
        <item>
            <title>Awesome Blog: The Old New Thing</title>
            <link>/posts/awesome-blog-old-new-thing/</link>
            <pubDate>Wed, 05 Jun 2019 11:27:00 +0200</pubDate>
            
            <guid>/posts/awesome-blog-old-new-thing/</guid>
            <description>The Old New Thing
Raymond Chen&amp;rsquo;s small posts are equal parts entertaining, terrifying and enlightening. As a renowned Microsoft engineer, he shares very interesting bits of information on a wide number of topics: tricky algorithms, anecdotes from Microsoft, and my favourite topic: explanations of features that made it in the SDK.</description>
            <content type="html"><![CDATA[<p><a href="https://devblogs.microsoft.com/oldnewthing/">The Old New Thing</a></p>

<p>Raymond Chen&rsquo;s small posts are equal parts entertaining, terrifying and enlightening. As a renowned Microsoft engineer, he shares very interesting bits of information on a wide number of topics: tricky algorithms, anecdotes from Microsoft, and my favourite topic: <em>explanations of features that made it in the SDK.</em> These often reveal some surprising side of software development that we rarely think about; and he comforts us by assuring that every software engineering decision is deliberate and has reasoning behind it.</p>

<p>Those reasons, mind you, might be borderline insane: my favourite story is when a team reverse-engineered some OS code, used that hack some undocumented structures, and when the OS got updated and the hacked solution stopped working, guess who they blamed? That&rsquo;s right, the OS. And what did the OS team do? The reverted the structure so the program could work again. It&rsquo;s logical, but&hellip; you get the idea.</p>
]]></content>
        </item>
        
        <item>
            <title>Hello World OS</title>
            <link>/posts/hello-world-os/</link>
            <pubDate>Wed, 05 Jun 2019 11:08:04 +0200</pubDate>
            
            <guid>/posts/hello-world-os/</guid>
            <description>A good friend of mine just found an archive of his &amp;ldquo;operating system&amp;rdquo;, the &amp;ldquo;Hello World OS&amp;rdquo;. It is basically a bootloader, and it gave me such nostalgia that I asked permission to post it:</description>
            <content type="html"><![CDATA[<p>A good friend of mine just found an archive of his &ldquo;operating system&rdquo;, the &ldquo;Hello World OS&rdquo;. It is basically a bootloader, and it gave me such nostalgia that I asked permission to post it:</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">asm</span>
<span style="color:#75715e">;; boot &#34;Hello world!&#34; program
</span><span style="color:#75715e"></span>
<span style="color:#75715e">;; usage:
</span><span style="color:#75715e">;; nasm -fbin hello.asm -o hello.bin
</span><span style="color:#75715e">;; UltraISO -bootfile hello.bin -outfile hello.iso
</span><span style="color:#75715e"></span>

<span style="color:#a6e22e">bits</span>    <span style="color:#ae81ff">16</span>                              <span style="color:#75715e">; 16 bit instructions
</span><span style="color:#75715e"></span><span style="color:#66d9ef">org</span>     <span style="color:#ae81ff">0x7C00</span>                          <span style="color:#75715e">; BIOS transfers execution here after loading the boot sector
</span><span style="color:#75715e"></span>
start:
	<span style="color:#75715e">;; zero out ds, because memory references use ds as base
</span><span style="color:#75715e"></span>	<span style="color:#75715e">;; ds can only be set via a register so reading from relative addresses would work
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ax</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">ds</span>, <span style="color:#66d9ef">ax</span>
    
    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">si</span>, <span style="color:#66d9ef">string</span>                      <span style="color:#75715e">; si points to the string we want to display
</span><span style="color:#75715e"></span>
loop:
    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">al</span>, [<span style="color:#66d9ef">si</span>]                        <span style="color:#75715e">; al contains the character we want to display
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">ah</span>, <span style="color:#ae81ff">0xE</span>                         <span style="color:#75715e">; teletype (TTY) mode
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">bl</span>, <span style="color:#ae81ff">0x7</span>                         <span style="color:#75715e">; text color (doesn&#39;t matter in tty mode)
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">mov</span> <span style="color:#66d9ef">bh</span>, <span style="color:#ae81ff">0</span>                           <span style="color:#75715e">; page number
</span><span style="color:#75715e"></span>
    <span style="color:#a6e22e">cmp</span> <span style="color:#66d9ef">al</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#a6e22e">jz</span> <span style="color:#66d9ef">loop_end</span>                         <span style="color:#75715e">; end loop if we reached the zero byte
</span><span style="color:#75715e"></span>    
    <span style="color:#66d9ef">int</span> <span style="color:#ae81ff">0x10</span>                            <span style="color:#75715e">; BIOS interrupt
</span><span style="color:#75715e"></span>    
    <span style="color:#66d9ef">inc</span> <span style="color:#66d9ef">si</span>
    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">loop</span>

loop_end:
    <span style="color:#a6e22e">jmp</span> <span style="color:#66d9ef">$</span>                               <span style="color:#75715e">; hog execution forever :D
</span><span style="color:#75715e"></span>

<span style="color:#a6e22e">string</span>  <span style="color:#66d9ef">db</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#66d9ef">Hello</span> <span style="color:#66d9ef">world</span>!<span style="color:#960050;background-color:#1e0010">&#34;</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>
<span style="color:#a6e22e">times</span> <span style="color:#ae81ff">510</span>-(<span style="color:#66d9ef">$-$$</span>) <span style="color:#66d9ef">db</span> <span style="color:#ae81ff">0</span>                   <span style="color:#75715e">; pad program to 512 bytes with zeroes
</span><span style="color:#75715e"></span><span style="color:#66d9ef">dw</span> <span style="color:#ae81ff">0xAA55</span>                               <span style="color:#960050;background-color:#1e0010">;</span> <span style="color:#66d9ef">boot</span> <span style="color:#66d9ef">sector</span> <span style="color:#66d9ef">closing</span> <span style="color:#66d9ef">bytes</span></code></pre></div>

<p>Ah, this is amazing. 0x7C00? 0xAA55? Beautiful.</p>
]]></content>
        </item>
        
        <item>
            <title>Proposal: 1bit file format</title>
            <link>/posts/1bit/</link>
            <pubDate>Mon, 03 Jun 2019 16:55:47 +0200</pubDate>
            
            <guid>/posts/1bit/</guid>
            <description>I was recently working with user-editable texture masks, and I was a little surprized when I didn&amp;rsquo;t find a specialized image file format for 1-bit (monochrome) images.</description>
            <content type="html"><![CDATA[<p>I was recently working with user-editable texture masks, and I was a little surprized when I didn&rsquo;t find a specialized image file format for 1-bit (monochrome) images. So, here&rsquo;s a file format proposal:</p>

<ul>
<li>File extension: .1bit</li>
<li>Magic header: 4 bytes: &ldquo;1bit&rdquo; in ASCII</li>
<li>2 bytes for the width of the image</li>
<li>2 bytes for the height of the image</li>
<li>1 byte for number of channels</li>
<li>RLE-compressed binary data</li>
<li>Optional:

<ul>
<li>1 byte for the length of the comment</li>
<li>1-254 bytes of text comment because ebin memes</li>
</ul></li>
</ul>

<p>Am I missing anything?</p>

<p>I wonder how hard would it be to create a Photoshop plugin for this. A C or C# implementation would be fairly trivial, though it <em>can</em> be a bit tricky when doing 1-bit RLE compression.</p>
]]></content>
        </item>
        
        <item>
            <title>Optimizing Site</title>
            <link>/posts/optimizing-site/</link>
            <pubDate>Wed, 24 Apr 2019 09:48:52 +0200</pubDate>
            
            <guid>/posts/optimizing-site/</guid>
            <description>So I showed the new site to a few friends, and as expected, they pointed out all kinds of things to fix :)</description>
            <content type="html"><![CDATA[<p>So I showed the new site to a few friends, and as expected, they pointed out all kinds of things to fix :)</p>

<p>Chief among them was the observation that if I&rsquo;m complaining about website sizes, the least I could do is to stop spamming 2MB images on my portfolio pages. While these are basically galleries, nothing advertises them as such and it might surprise some users. I was also curious how this works.</p>

<p>I checked <a href="https://www.webpagetest.org/">webpagetest</a>; the starting page is good enough:</p>

<p><img src="/img/optimizing-site/01 start.PNG" alt="screenshot of size render timings" /></p>

<p>The full page loads under 1 second. That&rsquo;s good enough, but it&rsquo;s a page with 13 words on it, so&hellip; checking the waterfall image, we can see that the javascript and fonts are the bulk of the page.</p>

<p><img src="/img/optimizing-site/02 start waterfall.png" alt="waterfall graph of page download" /></p>

<p>That&rsquo;s unfortunate, but sort of expected: both are part of the theme I&rsquo;m using here, and I haven&rsquo;t gotten around removing them. I suspect the fonts will be rather easy, but the javascript seems to be some kind of minimized package of multiple libraries, so it&rsquo;s not readily apparent which parts will I need to stay responsive. The author stated that I&rsquo;ll need to fire up nodeJS to edit it, which is baffling to be honest.</p>

<p>A single post with no images yields the same results. So let&rsquo;s move on to the galleries; here&rsquo;s how the prototypes page looks like in webpagetest:</p>

<p><img src="/img/optimizing-site/03 proto start.PNG" alt="screenshot of site render timings" /></p>

<p><img src="/img/optimizing-site/04 proto waterfall.png" alt="waterfall graph of page download" /></p>

<p>So: this page takes 13 seconds to fully load. The waterfall image is simple: images dominate everything. I&rsquo;m not using thumbnails, nor do I want to. But the images can be optimized, so I tried a few services. The &ldquo;space shooter&rdquo; gallery was originally ~9.5MB large. I tried <a href="https://imagecompressor.com/">imagecompressor.com</a>, <a href="https://tinypng.com/">TinyPNG</a>, and <a href="https://sourceforge.net/projects/nikkhokkho/">fileoptimizer</a>. I was looking for tools that can compress images in bulk.</p>

<p>fileoptimizer is a downloadable tool, and it is unbearably slow: a single image took 3 minutes to process. I wasn&rsquo;t going to wait 4 hours to do this, so I moved on. Of the remaining two, TinyPNG did slightly better: it compressed the 9.5MB gallery to 2.5MB (imagecompressor compressed to 2.9MB).</p>

<p>Compressing all images took some time. Let&rsquo;s check the results!</p>

<p><img src="/img/optimizing-site/05 proto optimized.PNG" alt="screenshot of site render timings" /></p>

<p>The prototype page is down to 3 seconds! That&rsquo;s almost 80%; not insignificant at all.</p>

<p>To be honest, while compressing the images, it occured to me that maybe all this work doesn&rsquo;t even worth it? But seeing the results this is clearly not the case. I&rsquo;d say I wouldn&rsquo;t bother with all this compressing, but for image-heavy pages this might very well make a difference.</p>

<hr />

<p><em>Update: I removed the fonts! It was not exactly straightforward, but the site is even leaner.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Awesome Blog: Digital Antiquarian</title>
            <link>/posts/awesome-blog-digital-antiquarian/</link>
            <pubDate>Tue, 23 Apr 2019 13:33:33 +0200</pubDate>
            
            <guid>/posts/awesome-blog-digital-antiquarian/</guid>
            <description>Another awesome blog!
Check this: out https://www.filfre.net/ Jimmy Maher writes about early video games in an exquisitely detailed, yet interesting manner.</description>
            <content type="html"><![CDATA[<p>Another awesome blog!</p>

<p>Check this: out <a href="https://www.filfre.net/">https://www.filfre.net/</a> Jimmy Maher writes about early video games in an exquisitely detailed, yet interesting manner.</p>

<p>I found it while doing some research on Ultima Underworld; his explanation of the unique mechanics in the game immediately caught my attention: simple, attentive, and almost entirely devoid of usual game critic cliches. Among other super interesting things I loved his coverage on the Ultima series, the history of early British video games, and his outstandingly coherent depiction of early technology.</p>

<p>His writing about the Apple II was so inspiring that I&rsquo;ve since read multiple books on the subject and even watched a film about Steve Jobs. I&rsquo;m amazed to report that Jimmy&rsquo;s posts are by far superior.</p>

<p>Go ahead and check out <a href="https://www.filfre.net/about-me/hall-of-fame">Hall of Fame</a> or <a href="https://www.filfre.net/about-me/sitemap">Table of Contents</a>, pick a headline that seems interesting and chances are you&rsquo;ll find something special!</p>
]]></content>
        </item>
        
        <item>
            <title>github.io</title>
            <link>/posts/githubio/</link>
            <pubDate>Tue, 16 Apr 2019 13:28:53 +0100</pubDate>
            
            <guid>/posts/githubio/</guid>
            <description>New Site!
I&amp;rsquo;m pretty excited to try github.io for a personal landing page.
I got inspired by Forrest Smith&amp;rsquo;s post on leaving Medium; he opted for a simple, static website that is easy to control and easier on the user.</description>
            <content type="html"><![CDATA[<p>New Site!</p>

<p>I&rsquo;m pretty excited to try github.io for a personal landing page.</p>

<p>I got inspired by <a href="https://www.forrestthewoods.com/blog/saying_goodbye_to_medium/">Forrest Smith&rsquo;s post</a> on leaving Medium; he opted for a simple, static website that is easy to control and easier on the user. Recently, a lot of opinions surfaced about the web being bloated, and I fully agree.</p>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">&quot;Why do I need a 4Ghz quadcore to run facebook?&quot; This is why. A single word split up into 11 HTML DOM elements to avoid adblockers. <a href="https://t.co/Zv4RfInrL0">pic.twitter.com/Zv4RfInrL0</a></p>&mdash; Mike Pan (@themikepan) <a href="https://twitter.com/themikepan/status/1093035372186034176?ref_src=twsrc%5Etfw">February 6, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So I started looking around, and found <a href="https://gohugo.io/">Hugo</a>. I can write stuff in Markdown (which I love) and it generates a static HTML site.</p>

<p>Alas, I spent way too much time trying to find the perfect theme and trying to create my own. I wanted the site to be responsive, but lean. Apparently, nobody really wants to do that &ndash; it&rsquo;s either unformatted HTML or &ldquo;fully-featured&rdquo;, with little middle ground. Anyway I found <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">Hello NG</a>; it&rsquo;s pretty lightweight, cool looking and clear, but still, it has some features that I don&rsquo;t really want, so I forked it and started removing features. I still have some work to do, but it&rsquo;s getting there.</p>

<p>A text-only page is ~650kb, which is not especially good. A quick look in the Chrome networking console tells me the asset sizes, which are:
<img src="/img/site-sizes.png" alt="Pie chart of size asset sizes" /></p>

<p>So there&rsquo;s vast room for improvement here. First of all, I don&rsquo;t think I need fancy fonts; I could use a built-in one. The amount of javascript is&hellip; amazing, too :) I don&rsquo;t have a lot of scripts, but this particular theme does include prism.js (code syntax highlighter) which might prove to be useful later on. (The responsive menu is JS too.)</p>

<p>I&rsquo;m convinced that syntax highlighting should happen when I build the site with Hugo; and in any case, it should only load for pages that have, you know, actual code in it.</p>

<p>Anyways! It&rsquo;s better than nothing. At least there are no cookies, popups and ads!</p>

<hr />

<p><em>Update: I&rsquo;ve since spent some time <a href="/posts/optimizing-site/">optimizing this site</a>.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Awesome Blog: Dan Luu (danluu.com)</title>
            <link>/posts/awesome-blog-danluu/</link>
            <pubDate>Mon, 08 Apr 2019 14:08:18 +0200</pubDate>
            
            <guid>/posts/awesome-blog-danluu/</guid>
            <description>I found a great post at danluu.com. I strongly recommend it! The author explores player interactions from male and female perspectives.</description>
            <content type="html"><![CDATA[<p>I found a great post at danluu.com. I strongly recommend it! The author explores <a href="https://danluu.com/overwatch-gender/">player interactions from male and female perspectives</a>. What I found captivating is the methodical, data-driven, scientific way he presented his findings. More of this please! His other posts are great too, and cover a wide variety of topics.</p>

<p>Since then, I&rsquo;ve been devouring his posts, and it&rsquo;s all kinds of fascinating. It&rsquo;s rare to find a blog so good, so I decided to write an endorsement post. I hope I can make this a regular occurence.</p>

<p><a href="https://danluu.com/">Check out his blog now!</a> (It&rsquo;s way better than mine anyway.)</p>
]]></content>
        </item>
        
        <item>
            <title>I tried node.js &#43; Heroku</title>
            <link>/posts/nodejs/</link>
            <pubDate>Thu, 10 Jan 2019 10:13:03 +0100</pubDate>
            
            <guid>/posts/nodejs/</guid>
            <description>y So I decided to try NodeJS and Heroku.
Heroku is a service that hosts your applications. NodeJS is a&amp;hellip; well, you know what it is, right?</description>
            <content type="html"><![CDATA[

<h2 id="y">y</h2>

<p>So I decided to try NodeJS and Heroku.</p>

<p>Heroku is a service that hosts your applications. NodeJS is a&hellip; well, you know what it is, right? You create apps using javascript, that&rsquo;s what it is.</p>

<p>There&rsquo;s a lot of hype around these two, so I was curious to try them; I also come from a very different environment (desktop apps written in C#) so I expected nothing &ndash; other than my own incompetence :) I knew I needed to learn this from scratch basically, so I tried to enter this world with no preconceptions. So, these are my subjective observations coming from a standalone developer perspective.</p>

<p>The project was simple: an online highscore-storing service for a Unity game. The Unity part is important: I wanted to access the service using C# code, which meant I needed an encryption routine that worked for both. I thought this was going to be the most difficult part, but I was wrong.</p>

<p>Let&rsquo;s start with Heroku. I found it to be a very friendly service, it has a nice onboarding/tutorial page which guides you through the setup phase and runs a basic app. It works locally and on the web, too.</p>

<p>I&rsquo;ve run into a minor problem; Heroku thought I had two projects in the local folder, despite having only one. I have no idea how did I end up there, but I eventually solved it by deleting a rogue git alias. It was a risky move because it&rsquo;s not clear what aliases does Heroku expect; now I have one remote called &ldquo;heroku&rdquo; and it works.</p>

<p>Other that that, it&rsquo;s smooth sailing. You have a git repo, you have a Heroku account, Heroku runs whatever is in you repo &ndash; that&rsquo;s it.</p>

<p>Aside: out of curiosity, I asked some of my more experienced friends how much time would this project take; the answers ranged from &ldquo;an hour&rdquo; to &ldquo;half a day&rdquo;. I think that&rsquo;s reasonable, as I only need two endpoints, a very simple database and some encryption. I was prepared to spend a few days on it to get the hang of things.</p>

<p>So, onto NodeJS! The default Heroku sample uses a framework called &ldquo;Express&rdquo;. I had no idea what it did. It&rsquo;s an &ldquo;application framework&rdquo;, which is meaningless, and their website isn&rsquo;t very helpful either. After some fumbling around it turns out it has some handy tools for serving HTTP websites, so I decided to stick with it. I asked around and it&rsquo;s one of the most popular webserver frameworks, so there&rsquo;s probably no harm in using that instead of writing a lot of boilerplate code. It still strikes me odd that its functionality isn&rsquo;t really explained on their site.</p>

<p>Handling a request is very simple; it&rsquo;s similar to writing to a console:</p>

<pre><code>app.get('/', function(req, res) {
  res.send(&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;ayy&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;);
});
</code></pre>

<p>I guess this is the part when I would have to look up a template engine to serve nice HTML content, but for this project I just need to pass data, so I&rsquo;m skipping that. Anyway, this ran flawlessly on Heroku, and seeing my own little NodeJS webserver running live is very promising! Note that I&rsquo;m about two hours in, including installing Heroku and NodeJS. So far, so good, I&rsquo;m progressing quite fast.</p>

<p>Next, I&rsquo;ll need a database to work with some &ldquo;real&rdquo; data. The local pgsql install process takes some time (around an hour), and syncing it with Heroku is supposed to be simple. However, I screwed this up, someehow lost my root password, I had to reinstall, and after that Heroku wasn&rsquo;t so cooperative. I guess an environment variable got stuck somewhere; I remember seeing it on a stackoverflow answer? It&rsquo;s not clear what the problem is and how should I go about it. I have no doubt that it would work nicely if I don&rsquo;t fuck it up, but I did, and it&rsquo;s very hard to find out how to make it work again, because I have little idea what&rsquo;s going on.</p>

<p>Eventually, I solve this too, but it takes a considerable amount of googling, and the solution turned out to be an unofficial post somewhere.</p>

<p>Once working, Heroku can connect to a db seamlessly &ndash; the same code and config works locally and in the cloud. (Well, not for me, but you get the idea.)</p>

<p>I had to look up the <code>await</code> and <code>async</code> keywords for javascript; these make it possible to run &ndash; yeah right &ndash; asynchronous code. I got a bit confused with <code>async</code> though. First, I forgot to declare my anonymous function as async, so I got a runtime error. This feels very awkward compared to compiled languages, but that was sort of expected. I wonder though if I could do a static analysis to catch these errors while deploying? This seems to be a major difference when developing web apps.</p>

<p>Of course, I wanted to catch errors too. I looked into best practices for this, and I found conflicting opinions. Some say that try/catch doesn&rsquo;t handle exceptions coming from async code, some say they do. There&rsquo;s no definitive list of exceptions a function can throw; developers are advised to always use <code>Error</code> when throwing, as it is the only exception that&rsquo;s widely supported. There are error events for Express. There are &ldquo;Promises&rdquo; with <code>.catch()</code> clauses&hellip;</p>

<p>The most striking statement is that after an error there is <em>no way</em> of ensuring the correctness of the application state, so you are to &ldquo;gracefully restart&rdquo; the application. This is unthinkable in the standalone world, but I guess it has something to do with a stateless environment and a large number of concurrent connections? Either way, there is a scary lack of documentation regarding this, and it&rsquo;s especially weird to work in an environment where you can never guarantee the correctness of the application. To be honest, it all seems to be a cop-out: nobody knows what&rsquo;s happening, so you just restart the app.</p>

<p>I&rsquo;d like to emphasise that this is my subjective observation as a Node-rookie. Maybe I just haven&rsquo;t found the appropriate docs, or I haven&rsquo;t spent enough time looking?</p>

<p>Perhaps an experienced developer could tell me what the best option is, but I&rsquo;d expect this topic to be well-covered, even for &ndash; especially for &ndash; beginner developers. The presence of &ldquo;opinions&rdquo; just highlight the lack of an official knowledge base.</p>

<h2 id="getting-data">Getting data</h2>

<p>Ending this rant, after a few hours I settled on using try/catch-ing the database code. The result, I have to admit, is super-clean, simple, and well-readable:</p>

<pre><code>app.get('/getscores', async function(req, res) {
  try
  {
    const client = await pool.connect();
    const result = await client.query('SELECT * FROM scores ORDER BY score DESC LIMIT 20');

    res.write(JSON.stringify(result.rows));
    res.end();

    client.release();
  }
  catch (err){
    console.error(err);
    res.status(500).send('Error: ' + err);
  }
});
</code></pre>

<p>Almost trivial. The &ldquo;getscores&rdquo; subpage returns a JSON containing the first 20 scores. I can&rsquo;t shake the feeling that this can crash for unknown reasons (why isn&rsquo;t <code>client.release()</code> in a finally block? I don&rsquo;t know), but let&rsquo;s hope for the best. I&rsquo;ve inserted some test scores into the database, and it works! Way simpler than I thought it would be.</p>

<h2 id="uploading-data">Uploading data</h2>

<p>As simple as the project is, I wanted to make score uploading somewhat secure. I have some experience with encryption, so I didn&rsquo;t have to learn this from scratch, and there is a nice library called &ldquo;CryptoJS&rdquo; that does the heavy lifting for me. A wonderful stackoverflow answer by user <em>usselite</em> basically solves the whole problem: encrypt some data using C#, decrypt it using javascript. Read it here: <a href="https://stackoverflow.com/questions/47891104/compatible-aes-encryption-and-decryption-for-c-sharp-and-javascript">https://stackoverflow.com/questions/47891104/compatible-aes-encryption-and-decryption-for-c-sharp-and-javascript</a></p>

<p>Implementing this was surprisingly easy. I had to make some modifications to work with NodeJS (this included looking up what the bafflingly-named &ldquo;atob&rdquo; function does and replacing it using <code>Buffer</code> objects), but in less than an hour, I made a console app in C# that generated some encrypted data, a debug page to post my data, and the real endpoint that receives the encrypted payload, decrypts it, and writes it to console.</p>

<p>Now, here&rsquo;s the catch.</p>

<p>The payload decrypting was easy; inserting it into the database is easy. Since the payload is encrypted, it&rsquo;s hard to tamper with, but I still wanted to validate the data before doing any database operations.</p>

<p>So I got stuck on trying to verify if the score is a valid integer. Amazingly, this took <em>hours</em>.</p>

<p>Let&rsquo;s start with the solution, the one I settled with at least:</p>

<pre><code>if (!Number.isInteger(payload.map) || (payload.map &lt;= 0))
{
  console.log('map invalid');
  res.status(400).end('error');
}
</code></pre>

<p>But getting there? That was surreal. The requirement is simple: the payload contains this data, and it should be a natural number (some values, like the level index, can be zero). There were all sorts of complications: how to check if the JSON (converted to an object after decryption) has a member? Converting it to bool doesn&rsquo;t work if the number is 0. There&rsquo;s a function for that; if we have the member, how to check if it&rsquo;s a number? Check its type? Which equality operator do you use for that? What&rsquo;s a number anyway? (Seriously, look that up.)</p>

<p>There are <em>dozens</em> of ways to go around this, each of them slightly different, there are hidden conversion going on in the background with all sorts of results (number, string, undefined, NaN&hellip;). <em>And there is not one that is definitive.</em></p>

<p>This is baffling. Should I use a validation library? Seems overkill for such a simple task. It seems like I need <em>more experience</em> to answer this question? That this is not a trivial problem?</p>

<h2 id="conclusions">Conclusions</h2>

<p>I&rsquo;d like to remind you again that I spent about 8 hours on this project, so I&rsquo;m definitively not an expert, and please consider this as first-look impressions.</p>

<p>Heroku is a very nice service. It just works, it&rsquo;s free, and does a lot of things for you so you can concentrate on development. It would be very interesting to see how it scales upwards, distributing work between multiple dynos (a VM, sort of), but&hellip; I&rsquo;m not going to do that :) It is amazingly friendly &ndash; you don&rsquo;t even have to remember git credentials?! That&rsquo;s the most streamlined service I ever saw.</p>

<p>Developing stuff in NodeJS is very fast. You can get your online thing running in a day, which is a lot faster tha I expected. If you need something, there&rsquo;s a good chance that there is an npm module for that, so you&rsquo;re just a command line entry away from implementing your high-level vision.</p>

<p>It is very hard, however, to write <em>correct</em> code. Debugging is very restricted, so you better log everything. I presume it also drastically increases the number of unit tests you need to write. Error handling is very weird &ndash; it seems like nobody knows how it works, and nobody cares. This means that even if you want to write correct code, chances are some of your dependencies will behave unpredictably.</p>

<p>Documentation is, well, dare I say, non-existent? There is no single source of truth. There are, however, conflicting &ldquo;opinions&rdquo;. Most of your time will be spent on Stackoverflow and various personal blogs on Medium, with no apparent way to verify what you read (other than trying it). It&rsquo;s not unlikely that a developer will recommend a solution because they &ldquo;like it the most&rdquo;.</p>

<p>Suprisingly, nobody thinks of this as a concern.</p>

<p>I find this worrying, and I wouldn&rsquo;t recommend NodeJS for anything other than really small, insignificant projects. Maintaining even medium size projects would be a nightmare; my project is about 200 lines of code, and I have no idea if it&rsquo;s correct or not, nor have I any means of checking it. Does Express throw an exception somewhere? Or CryptoJS? Is it enough to put my database code in try/catch? Will it even catch errors in async functions? The only way to find out is to try it &ndash; which would take quite some time in itself.</p>

<p>What happens when an exception is thrown somewhere I didn&rsquo;t expect? Okay, I know this one &ndash; the whole app will crash. How do I avoid that? I have no clue. It is telling that there are a fair number of tools that will automatically restart your app if it crashes.</p>
]]></content>
        </item>
        
        <item>
            <title>First</title>
            <link>/posts/first/</link>
            <pubDate>Wed, 09 Jan 2019 11:23:21 +0100</pubDate>
            
            <guid>/posts/first/</guid>
            <description>yo man! This is my first post with hugo. i like it so far.</description>
            <content type="html"><![CDATA[<p>yo man! This is my first post with hugo. i like it so far.</p>
]]></content>
        </item>
        
    </channel>
</rss>
